name: "Build"

on:
  push

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # amd64 builds (Alpine + Debian)
          - name: amd64
            os: ubuntu-latest
            S6_ARCH: amd64
            DOCKERFILE: Dockerfile
            AVAHI: "1"
            TAG_SUFFIX: amd64
          - name: no-avahi-amd64
            os: ubuntu-latest
            S6_ARCH: amd64
            DOCKERFILE: Dockerfile
            AVAHI: "0"
            TAG_SUFFIX: no-avahi-amd64
          - name: debian-amd64
            os: ubuntu-latest
            S6_ARCH: amd64
            DOCKERFILE: Dockerfile.debian
            AVAHI: "1"
            TAG_SUFFIX: debian-amd64
          - name: debian-no-avahi-amd64
            os: ubuntu-latest
            S6_ARCH: amd64
            DOCKERFILE: Dockerfile.debian
            AVAHI: "0"
            TAG_SUFFIX: debian-no-avahi-amd64

          # arm32v6 builds (Alpine)
          - name: arm32v6
            os: ubuntu-latest
            S6_ARCH: armhf
            DOCKERFILE: Dockerfile
            AVAHI: "1"
            TAG_SUFFIX: arm32v6
            ALT_SUFFIX: raspberry-pi
          - name: no-avahi-arm32v6
            os: ubuntu-latest
            S6_ARCH: armhf
            DOCKERFILE: Dockerfile
            AVAHI: "0"
            TAG_SUFFIX: no-avahi-arm32v6
            ALT_SUFFIX: no-avahi-raspberry-pi

          # arm32v7 builds (Debian)
          - name: debian-arm32v7
            os: ubuntu-latest
            S6_ARCH: armhf
            DOCKERFILE: Dockerfile.debian
            AVAHI: "1"
            TAG_SUFFIX: debian-arm32v7
            ALT_SUFFIX: debian-raspberry-pi
          - name: debian-no-avahi-arm32v7
            os: ubuntu-latest
            S6_ARCH: armhf
            DOCKERFILE: Dockerfile.debian
            AVAHI: "0"
            TAG_SUFFIX: debian-no-avahi-arm32v7
            ALT_SUFFIX: debian-no-avahi-raspberry-pi

          # arm64v8 builds (Alpine + Debian)
          - name: arm64v8
            os: ubuntu-latest
            S6_ARCH: aarch64
            DOCKERFILE: Dockerfile
            AVAHI: "1"
            TAG_SUFFIX: arm64v8
            ALT_SUFFIX: aarch64
          - name: no-avahi-arm64v8
            os: ubuntu-latest
            S6_ARCH: aarch64
            DOCKERFILE: Dockerfile
            AVAHI: "0"
            TAG_SUFFIX: no-avahi-arm64v8
            ALT_SUFFIX: no-avahi-aarch64
          - name: debian-arm64v8
            os: ubuntu-latest
            S6_ARCH: aarch64
            DOCKERFILE: Dockerfile.debian
            AVAHI: "1"
            TAG_SUFFIX: debian-arm64v8
          - name: debian-no-avahi-arm64v8
            os: ubuntu-latest
            S6_ARCH: aarch64
            DOCKERFILE: Dockerfile.debian
            AVAHI: "0"
            TAG_SUFFIX: debian-no-avahi-arm64v8

    steps:
    # checkout repo
    - uses: actions/checkout@v2

    # setup multi-arch build support
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static:register --reset

    # get branch names
    - name: Get Branch Name
      # if: contains(github.ref, "heads")
      id: get_branch
      run: |
        echo ${GITHUB_REF/refs\/heads\//}
        echo ::set-output name=NAME::${GITHUB_REF/refs\/heads\//}

    # get tag name
    - name: Get Tag Name
      # if: contains(github.ref, "tags")
      id: get_branch
      run: |
        echo ${GITHUB_REF/refs\/tags\//}
        echo ::set-output name=NAME::${GITHUB_REF/refs\/tags\//}

    # generate the image tag
    - name: Get Image Tag
      id: image
      run: |
        export TARGET_IMAGE_TAG=$(if [ "${{ steps.get_branch.outputs.NAME }}" = "master" ]; then if [ "${{ matrix.TAG_SUFFIX }}" = "" ]; then echo "latest"; else echo "${{ matrix.TAG_SUFFIX }}"; fi; else if [ "${{ matrix.TAG_SUFFIX }}" = "" ]; then echo "${{ steps.get_branch.outputs.NAME }}"; else echo "${{ steps.get_branch.outputs.NAME }}-${{ matrix.TAG_SUFFIX }}"; fi; fi)
        echo $TARGET_IMAGE_TAG
        echo ::set-output name=TAG::$TARGET_IMAGE_TAG

    # pull the existing image from the registry, if it exists, to use as a build cache
    - name: Get Image Cache




    